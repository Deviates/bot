from aiogram import types, Dispatcher
from config import bot, dp
from button.button import kursy_button, start_markup
from button.inline_button import kurs_backend, kurs_android, kurs_dizain, kurs_frontend



async def kurs(message: types.Message):
    await bot.send_message(message.from_user.id, f"ü•≥ –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! ü•≥", reply_markup=kursy_button )

async def backend(message:types.Message):
     photo = open("media/61377ba5ace322607b7222b87d27a833.jpg", "rb")     
     await message.answer_photo(photo=photo)
     await message.answer(f"""‚úÖ –í–≤–µ–¥–µ–Ω–∏–µ –≤ IT –∏ Python
‚úÖ –ò–∑—É—á–µ–Ω–∏–µ –≤—ë—Ä—Å—Ç–∫–∏ –Ω–∞ HTML, CSS, JS
‚úÖ Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Python –∏ Django
‚úÖ PostgreSQL –∏ —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö """, reply_markup=kurs_backend)    

async def frontend(message: types.Message):
     photo = open("media/java-script1.jpg", "rb")
     await message.answer_photo(photo=photo)
     await message.answer( f""" ‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–µ–±–∞ –∏ –æ—Å–Ω–æ–≤—ã HTML
‚úÖ CSS –∏ –≤–µ—Ä—Å—Ç–∫–∞ –Ω–∞ Flexbox
‚úÖ –†–∞–±–æ—Ç–∞ —Å Git
‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —è–∑—ã–∫–∞ Javascript
‚úÖ –û–±—ä–µ–∫—Ç—ã, EventLoop
‚úÖ –ú–æ–¥–µ–ª—å DOM –∏ —Å–±–æ—Ä—â–∏–∫–∏ (Webpack)
‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ React.js """, reply_markup=kurs_frontend) 
     
async def android(message: types.Message):
     photo = open("media/java.png", "rb")
     await message.answer_photo(photo=photo)
     await message.answer(f""" ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ 
‚úÖ –û—Ñ–ª–∞–π–Ω –∏ –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏
‚úÖ –ó–∞–ø–∏—Å—å —É—Ä–æ–∫–æ–≤
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è """, reply_markup=kurs_android) 

async def dizain(message: types.Message):
     photo = open("media/5a84e819b8b275a95759276dbad635f2.png", "rb")
     await message.answer_photo(photo=photo)
     await message.answer(f""" ‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ 
‚úÖ –û—Ñ–ª–∞–π–Ω –∏ –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏
‚úÖ –ó–∞–ø–∏—Å—å —É—Ä–æ–∫–æ–≤
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è  """, reply_markup=kurs_dizain)           

async def nazad1(message: types.Message):
     match message.text:
          case "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
            await message.answer(f"–ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—é",reply_markup=start_markup) 

async def nazad(call: types.CallbackQuery):
     if call.data == "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
          await call.message.answer(f"–ù–∞—à–∏ –∫—É—Ä—Å—ã",reply_markup=kursy_button)  

def register_handlers_lesson(dp:Dispatcher):
    dp.register_message_handler(kurs, text="üë®‚Äçüéì –ù–∞—à–∏ –∫—É—Ä—Å—ã")   
    dp.register_message_handler(backend, text="üõ† Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")  
    dp.register_message_handler(frontend, text="üé® Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    dp.register_message_handler(android, text="üîß Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    dp.register_message_handler(dizain, text="üíÉ UX/UI-–¥–∏–∑–∞–π–Ω–µ—Ä")
    dp.register_message_handler(nazad1, text="‚Ü™Ô∏è –ù–∞–∑–∞–¥")
    dp.register_callback_query_handler(nazad, lambda call: call.data == "‚Ü™Ô∏è –ù–∞–∑–∞–¥")